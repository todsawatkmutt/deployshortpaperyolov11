import os
import requests
import streamlit as st
from ultralytics import YOLO
from PIL import Image
import numpy as np

# 1) ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å GitHub
MODEL_PATH = "best.pt"
RAW_URL = (
    "https://raw.githubusercontent.com/"
    "todsawatkmutt/deployshortpaperyolov11/main/best%20(2).pt"
)

@st.cache_resource(show_spinner=False)
def load_model():
    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    if not os.path.exists(MODEL_PATH):
        with st.spinner("Downloading model weights‚Ä¶"):
            resp = requests.get(RAW_URL, stream=True)
            resp.raise_for_status()
            with open(MODEL_PATH, "wb") as f:
                for chunk in resp.iter_content(chunk_size=8192):
                    f.write(chunk)
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ Ultralytics YOLO
    return YOLO(MODEL_PATH)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏à‡∏∞ cache ‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
model = load_model()

st.title("üïµÔ∏è Crack Detection with YOLO11 + Streamlit")

uploaded = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])
if uploaded:
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
    img = Image.open(uploaded).convert("RGB")
    st.image(img, caption="Uploaded Image", use_container_width=True)

    # ‡∏£‡∏±‡∏ô inference
    results = model.predict(source=np.array(img), conf=0.25, imgsz=1088)
    annotated = results[0].plot()

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    st.image(annotated, caption="Detection Result", use_container_width=True)
