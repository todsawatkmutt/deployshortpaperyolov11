import os, io, tempfile, requests
import numpy as np
import streamlit as st
from PIL import Image

# --------- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ weights_only (Torch ‚â• 2.6) ---------
os.environ.setdefault("TORCH_FORCE_NO_WEIGHTS_ONLY_LOAD", "1")

from ultralytics import YOLO

# --------- ‡πÇ‡∏´‡∏•‡∏î .env / secrets ---------
from dotenv import load_dotenv
load_dotenv()

MODEL_PATH = os.getenv("MODEL_PATH", st.secrets.get("MODEL_PATH", "best.pt"))
RAW_URL    = os.getenv("RAW_URL",    st.secrets.get("RAW_URL", ""))

# --------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ---------
def _download(url: str, dst: str):
    with requests.get(url, stream=True, timeout=30) as r:
        r.raise_for_status()
        tot = int(r.headers.get("content-length", 0))
        with st.progress(0, text="üì• Downloading model‚Ä¶") as bar, open(dst, "wb") as f:
            sz = 0
            for chunk in r.iter_content(1 << 15):
                f.write(chunk)
                sz += len(chunk)
                bar.progress(min(sz / tot, 1.0) if tot else 0.0)

# --------- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ---------
@st.cache_resource(show_spinner="üöÄ Loading model‚Ä¶")
def load_model():
    if not os.path.exists(MODEL_PATH):
        if not RAW_URL:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö MODEL_PATH ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á RAW_URL")
            st.stop()
        _download(RAW_URL, MODEL_PATH)
    return YOLO(MODEL_PATH)

model = load_model()

# --------- UI ---------
st.title("üïµÔ∏è Crack Detection (YOLOv11)")

uploaded = st.file_uploader("‚¨ÜÔ∏è Upload image (JPG/PNG)", type=["jpg", "jpeg", "png"])

if uploaded:
    # Streamlit ‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô BytesIO -> PIL -> NumPy
    img = Image.open(uploaded).convert("RGB")
    st.image(img, caption="Original", use_container_width=True)

    # ---------- Predict ----------
    with st.spinner("Detecting‚Ä¶"):
        results = model.predict(
            source=np.asarray(img),  # direct NumPy
            imgsz=1088,
            conf=0.25,
            device="cpu"            # > ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ GPU
        )
    annotated = results[0].plot()

    st.image(annotated, caption="Detection Result", use_container_width=True)

    # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (optional)
    buf = io.BytesIO()
    Image.fromarray(annotated).save(buf, format="PNG")
    st.download_button("üíæ Download result", buf.getvalue(), "result.png", "image/png")
